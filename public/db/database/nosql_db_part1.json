{
  "instructions": [
    {
      "id": "db_nosql_001",
      "title": {
        "es": "Selección del tipo de base de datos NoSQL",
        "en": "NoSQL database type selection"
      },
      "description": {
        "es": "Seleccionar el tipo de base de datos NoSQL adecuado según los requisitos",
        "en": "Select the appropriate NoSQL database type based on requirements"
      },
      "text": {
        "es": "Selecciona el tipo de base de datos NoSQL adecuado basado en los patrones de acceso a datos, estructura de datos y requisitos de escalabilidad. Usa bases de datos de documentos (MongoDB, CouchDB) para datos semiestructurados con consultas flexibles, bases de datos clave-valor (Redis, DynamoDB) para operaciones simples de alta velocidad, bases de datos columnares (Cassandra, HBase) para análisis de grandes volúmenes de datos, y bases de datos de grafos (Neo4j, ArangoDB) para datos altamente relacionados con relaciones complejas.",
        "en": "Select the appropriate NoSQL database type based on data access patterns, data structure, and scalability requirements. Use document databases (MongoDB, CouchDB) for semi-structured data with flexible querying, key-value databases (Redis, DynamoDB) for simple high-speed operations, columnar databases (Cassandra, HBase) for large-scale data analytics, and graph databases (Neo4j, ArangoDB) for highly related data with complex relationships."
      },
      "importance": "high",
      "category": "database",
      "subcategory": "nosql_db",
      "tags": ["architecture", "database_selection", "universal"],
      "source": {
        "agentType": "devin",
        "repository": "Devin AI/devin.txt",
        "context": "Database Best Practices"
      },
      "compatibility": {
        "frameworks": ["all"],
        "languages": ["all"],
        "environments": ["all"]
      },
      "examples": [
        {
          "context": {
            "es": "Seleccionando la base de datos NoSQL adecuada para una aplicación",
            "en": "Selecting the appropriate NoSQL database for an application"
          },
          "code": "Documentos: datos JSON flexibles + Clave-valor: caché y alta velocidad + Columnar: análisis masivos + Grafo: relaciones complejas"
        }
      ],
      "relatedInstructions": ["db_nosql_002", "db_nosql_007"]
    },
    {
      "id": "db_nosql_002",
      "title": {
        "es": "Modelado de datos orientado a consultas",
        "en": "Query-oriented data modeling"
      },
      "description": {
        "es": "Diseñar esquemas basados en patrones de consulta en lugar de relaciones",
        "en": "Design schemas based on query patterns rather than relationships"
      },
      "text": {
        "es": "Diseña esquemas de datos NoSQL basándote en los patrones de consulta y acceso específicos de tu aplicación, en lugar de enfocarte en normalización y relaciones. Considera desnormalizar y embeber datos relacionados que se consultan juntos frecuentemente. Analiza y optimiza para los casos de uso más frecuentes e importantes, incluso si esto significa almacenar datos redundantes. Recuerda que cada tipo de base de datos NoSQL tiene diferentes consideraciones de modelado basadas en sus características específicas.",
        "en": "Design NoSQL data schemas based on the specific query and access patterns of your application, rather than focusing on normalization and relationships. Consider denormalizing and embedding related data that is frequently queried together. Analyze and optimize for the most frequent and important use cases, even if this means storing redundant data. Remember that each NoSQL database type has different modeling considerations based on its specific characteristics."
      },
      "importance": "high",
      "category": "database",
      "subcategory": "nosql_db",
      "tags": ["data_modeling", "schema_design", "universal"],
      "source": {
        "agentType": "devin",
        "repository": "Devin AI/devin.txt",
        "context": "Database Best Practices"
      },
      "compatibility": {
        "frameworks": ["all"],
        "languages": ["all"],
        "environments": ["all"]
      },
      "examples": [
        {
          "context": {
            "es": "Modelando datos para un blog en MongoDB",
            "en": "Modeling data for a blog in MongoDB"
          },
          "code": "// Documento de post con comentarios embebidos para consultas eficientes\n{\n  \"_id\": \"post123\",\n  \"title\": \"NoSQL Best Practices\",\n  \"content\": \"...\",\n  \"author\": { \"id\": \"user456\", \"name\": \"Jane Doe\" },\n  \"comments\": [ { \"user\": \"user789\", \"text\": \"Great post!\" } ]\n}"
        }
      ],
      "relatedInstructions": ["db_nosql_001", "db_nosql_003"]
    },
    {
      "id": "db_nosql_003",
      "title": {
        "es": "Esquemas flexibles y evolución",
        "en": "Flexible schemas and evolution"
      },
      "description": {
        "es": "Aprovechar esquemas flexibles para adaptarse a cambios en los requisitos",
        "en": "Leverage flexible schemas to adapt to changing requirements"
      },
      "text": {
        "es": "Aprovecha la naturaleza flexible de los esquemas NoSQL para adaptar las estructuras de datos a la evolución de los requisitos de la aplicación. Evita asumir que la flexibilidad significa ausencia de diseño; en cambio, establece convenciones y validación de esquemas para mantener la calidad de los datos. Planifica estrategias para manejar la evolución del esquema, incluyendo migraciones graduales, versionado de documentos, y patrones para mantener la compatibilidad hacia atrás con datos existentes.",
        "en": "Leverage the flexible nature of NoSQL schemas to adapt data structures to evolving application requirements. Avoid assuming that flexibility means no design; instead, establish schema conventions and validation to maintain data quality. Plan strategies for handling schema evolution, including gradual migrations, document versioning, and patterns for maintaining backward compatibility with existing data."
      },
      "importance": "high",
      "category": "database",
      "subcategory": "nosql_db",
      "tags": ["schema_design", "data_management", "universal"],
      "source": {
        "agentType": "v0",
        "repository": "v0 Prompts and Tools/Prompt.txt",
        "context": "Database Design"
      },
      "compatibility": {
        "frameworks": ["all"],
        "languages": ["all"],
        "environments": ["all"]
      },
      "examples": [
        {
          "context": {
            "es": "Manejando la evolución de esquemas en MongoDB",
            "en": "Handling schema evolution in MongoDB"
          },
          "code": "// Utilizar versionado de esquema\n{\n  \"_id\": \"user123\",\n  \"schemaVersion\": 2,\n  \"name\": \"John Doe\",\n  \"contact\": { \"email\": \"john@example.com\", \"phone\": \"123-456-7890\" }\n}"
        }
      ],
      "relatedInstructions": ["db_nosql_002", "db_nosql_006"]
    },
    {
      "id": "db_nosql_004",
      "title": {
        "es": "Indexación efectiva",
        "en": "Effective indexing"
      },
      "description": {
        "es": "Crear índices adecuados para optimizar consultas frecuentes",
        "en": "Create appropriate indexes to optimize frequent queries"
      },
      "text": {
        "es": "Crea índices adecuados en bases de datos NoSQL para optimizar el rendimiento de consultas frecuentes, pero sé estratégico para evitar sobrecargar el sistema con demasiados índices. Analiza patrones de consulta reales, utiliza herramientas de perfilado de consultas, y monitorea el uso de índices para identificar oportunidades de optimización. Ten en cuenta que cada tipo de base de datos NoSQL tiene diferentes estrategias de indexación y limitaciones que debes considerar para un rendimiento óptimo.",
        "en": "Create appropriate indexes in NoSQL databases to optimize performance of frequent queries, but be strategic to avoid overloading the system with too many indexes. Analyze actual query patterns, use query profiling tools, and monitor index usage to identify optimization opportunities. Be aware that each NoSQL database type has different indexing strategies and limitations that should be considered for optimal performance."
      },
      "importance": "high",
      "category": "database",
      "subcategory": "nosql_db",
      "tags": ["performance", "query_optimization", "universal"],
      "source": {
        "agentType": "devin",
        "repository": "Devin AI/devin.txt",
        "context": "Database Best Practices"
      },
      "compatibility": {
        "frameworks": ["all"],
        "languages": ["all"],
        "environments": ["all"]
      },
      "examples": [
        {
          "context": {
            "es": "Creando índices en MongoDB para consultas frecuentes",
            "en": "Creating indexes in MongoDB for frequent queries"
          },
          "code": "// Crear índice compuesto para consultas frecuentes por categoría y fecha\ndb.products.createIndex({ category: 1, createdAt: -1 });\n\n// Crear índice de texto para búsquedas textuales\ndb.articles.createIndex({ title: \"text\", content: \"text\" });"
        }
      ],
      "relatedInstructions": ["db_nosql_005", "db_rel_003"]
    },
    {
      "id": "db_nosql_005",
      "title": {
        "es": "Estrategias de particionamiento",
        "en": "Sharding strategies"
      },
      "description": {
        "es": "Implementar estrategias de particionamiento efectivas para escalabilidad",
        "en": "Implement effective sharding strategies for scalability"
      },
      "text": {
        "es": "Implementa estrategias de particionamiento efectivas para escalar horizontalmente bases de datos NoSQL. Selecciona claves de partición que distribuyan uniformemente los datos y minimicen las consultas entre particiones. Considera patrones de acceso, localidad de datos, y evolución de datos al diseñar el esquema de particionamiento. Evita hotspots que pueden degradar el rendimiento y estar preparado para rebalancear particiones a medida que crece la carga de trabajo.",
        "en": "Implement effective sharding strategies to horizontally scale NoSQL databases. Select partition keys that evenly distribute data and minimize cross-partition queries. Consider access patterns, data locality, and data evolution when designing the sharding scheme. Avoid hotspots that can degrade performance and be prepared to rebalance shards as the workload grows."
      },
      "importance": "high",
      "category": "database",
      "subcategory": "nosql_db",
      "tags": ["scalability", "performance", "advanced"],
      "source": {
        "agentType": "devin",
        "repository": "Devin AI/devin.txt",
        "context": "Database Best Practices"
      },
      "compatibility": {
        "frameworks": ["all"],
        "languages": ["all"],
        "environments": ["all"]
      },
      "examples": [
        {
          "context": {
            "es": "Implementando una estrategia de particionamiento en MongoDB",
            "en": "Implementing a sharding strategy in MongoDB"
          },
          "code": "// Habilitar sharding para una base de datos\nsh.enableSharding(\"myDatabase\");\n\n// Crear un índice de sharding en la colección\ndb.products.createIndex({ region: 1, _id: 1 });\n\n// Particionar la colección por región\nsh.shardCollection(\"myDatabase.products\", { region: 1, _id: 1 });"
        }
      ],
      "relatedInstructions": ["db_nosql_004", "db_rel_009"]
    }
  ]
}