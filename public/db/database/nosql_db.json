{
  "instructions": [
    {
      "id": "db_nosql_001",
      "title": {
        "es": "Selección del tipo de base de datos NoSQL",
        "en": "NoSQL database type selection"
      },
      "description": {
        "es": "Seleccionar el tipo de base de datos NoSQL adecuado según los requisitos",
        "en": "Select the appropriate NoSQL database type based on requirements"
      },
      "text": {
        "es": "Selecciona el tipo de base de datos NoSQL adecuado basado en los patrones de acceso a datos, estructura de datos y requisitos de escalabilidad. Usa bases de datos de documentos (MongoDB, CouchDB) para datos semiestructurados con consultas flexibles, bases de datos clave-valor (Redis, DynamoDB) para operaciones simples de alta velocidad, bases de datos columnares (Cassandra, HBase) para análisis de grandes volúmenes de datos, y bases de datos de grafos (Neo4j, ArangoDB) para datos altamente relacionados con relaciones complejas.",
        "en": "Select the appropriate NoSQL database type based on data access patterns, data structure, and scalability requirements. Use document databases (MongoDB, CouchDB) for semi-structured data with flexible querying, key-value databases (Redis, DynamoDB) for simple high-speed operations, columnar databases (Cassandra, HBase) for large-scale data analytics, and graph databases (Neo4j, ArangoDB) for highly related data with complex relationships."
      },
      "importance": "high",
      "category": "database",
      "subcategory": "nosql_db",
      "tags": ["architecture", "database_selection", "universal"],
      "source": {
        "agentType": "devin",
        "repository": "Devin AI/devin.txt",
        "context": "Database Best Practices"
      },
      "compatibility": {
        "frameworks": ["all"],
        "languages": ["all"],
        "environments": ["all"]
      },
      "examples": [
        {
          "context": {
            "es": "Seleccionando la base de datos NoSQL adecuada para una aplicación",
            "en": "Selecting the appropriate NoSQL database for an application"
          },
          "code": "Documentos: datos JSON flexibles + Clave-valor: caché y alta velocidad + Columnar: análisis masivos + Grafo: relaciones complejas"
        }
      ],
      "relatedInstructions": ["db_nosql_002", "db_nosql_007"]
    },
    {
      "id": "db_nosql_002",
      "title": {
        "es": "Modelado de datos orientado a consultas",
        "en": "Query-oriented data modeling"
      },
      "description": {
        "es": "Diseñar esquemas basados en patrones de consulta en lugar de relaciones",
        "en": "Design schemas based on query patterns rather than relationships"
      },
      "text": {
        "es": "Diseña esquemas de datos NoSQL basándote en los patrones de consulta y acceso específicos de tu aplicación, en lugar de enfocarte en normalización y relaciones. Considera desnormalizar y embeber datos relacionados que se consultan juntos frecuentemente. Analiza y optimiza para los casos de uso más frecuentes e importantes, incluso si esto significa almacenar datos redundantes. Recuerda que cada tipo de base de datos NoSQL tiene diferentes consideraciones de modelado basadas en sus características específicas.",
        "en": "Design NoSQL data schemas based on the specific query and access patterns of your application, rather than focusing on normalization and relationships. Consider denormalizing and embedding related data that is frequently queried together. Analyze and optimize for the most frequent and important use cases, even if this means storing redundant data. Remember that each NoSQL database type has different modeling considerations based on its specific characteristics."
      },
      "importance": "high",
      "category": "database",
      "subcategory": "nosql_db",
      "tags": ["data_modeling", "schema_design", "universal"],
      "source": {
        "agentType": "devin",
        "repository": "Devin AI/devin.txt",
        "context": "Database Best Practices"
      },
      "compatibility": {
        "frameworks": ["all"],
        "languages": ["all"],
        "environments": ["all"]
      },
      "examples": [
        {
          "context": {
            "es": "Modelando datos para un blog en MongoDB",
            "en": "Modeling data for a blog in MongoDB"
          },
          "code": "// Documento de post con comentarios embebidos para consultas eficientes\n{\n  \"_id\": \"post123\",\n  \"title\": \"NoSQL Best Practices\",\n  \"content\": \"...\",\n  \"author\": { \"id\": \"user456\", \"name\": \"Jane Doe\" },\n  \"comments\": [ { \"user\": \"user789\", \"text\": \"Great post!\" } ]\n}"
        }
      ],
      "relatedInstructions": ["db_nosql_001", "db_nosql_003"]
    },
    {
      "id": "db_nosql_003",
      "title": {
        "es": "Esquemas flexibles y evolución",
        "en": "Flexible schemas and evolution"
      },
      "description": {
        "es": "Aprovechar esquemas flexibles para adaptarse a cambios en los requisitos",
        "en": "Leverage flexible schemas to adapt to changing requirements"
      },
      "text": {
        "es": "Aprovecha la naturaleza flexible de los esquemas NoSQL para adaptar las estructuras de datos a la evolución de los requisitos de la aplicación. Evita asumir que la flexibilidad significa ausencia de diseño; en cambio, establece convenciones y validación de esquemas para mantener la calidad de los datos. Planifica estrategias para manejar la evolución del esquema, incluyendo migraciones graduales, versionado de documentos, y patrones para mantener la compatibilidad hacia atrás con datos existentes.",
        "en": "Leverage the flexible nature of NoSQL schemas to adapt data structures to evolving application requirements. Avoid assuming that flexibility means no design; instead, establish schema conventions and validation to maintain data quality. Plan strategies for handling schema evolution, including gradual migrations, document versioning, and patterns for maintaining backward compatibility with existing data."
      },
      "importance": "high",
      "category": "database",
      "subcategory": "nosql_db",
      "tags": ["schema_design", "data_management", "universal"],
      "source": {
        "agentType": "v0",
        "repository": "v0 Prompts and Tools/Prompt.txt",
        "context": "Database Design"
      },
      "compatibility": {
        "frameworks": ["all"],
        "languages": ["all"],
        "environments": ["all"]
      },
      "examples": [
        {
          "context": {
            "es": "Manejando la evolución de esquemas en MongoDB",
            "en": "Handling schema evolution in MongoDB"
          },
          "code": "// Utilizar versionado de esquema\n{\n  \"_id\": \"user123\",\n  \"schemaVersion\": 2,\n  \"name\": \"John Doe\",\n  \"contact\": { \"email\": \"john@example.com\", \"phone\": \"123-456-7890\" }\n}"
        }
      ],
      "relatedInstructions": ["db_nosql_002", "db_nosql_006"]
    },
    {
      "id": "db_nosql_004",
      "title": {
        "es": "Indexación efectiva",
        "en": "Effective indexing"
      },
      "description": {
        "es": "Crear índices adecuados para optimizar consultas frecuentes",
        "en": "Create appropriate indexes to optimize frequent queries"
      },
      "text": {
        "es": "Crea índices adecuados en bases de datos NoSQL para optimizar el rendimiento de consultas frecuentes, pero sé estratégico para evitar sobrecargar el sistema con demasiados índices. Analiza patrones de consulta reales, utiliza herramientas de perfilado de consultas, y monitorea el uso de índices para identificar oportunidades de optimización. Ten en cuenta que cada tipo de base de datos NoSQL tiene diferentes estrategias de indexación y limitaciones que debes considerar para un rendimiento óptimo.",
        "en": "Create appropriate indexes in NoSQL databases to optimize performance of frequent queries, but be strategic to avoid overloading the system with too many indexes. Analyze actual query patterns, use query profiling tools, and monitor index usage to identify optimization opportunities. Be aware that each NoSQL database type has different indexing strategies and limitations that should be considered for optimal performance."
      },
      "importance": "high",
      "category": "database",
      "subcategory": "nosql_db",
      "tags": ["performance", "query_optimization", "universal"],
      "source": {
        "agentType": "devin",
        "repository": "Devin AI/devin.txt",
        "context": "Database Best Practices"
      },
      "compatibility": {
        "frameworks": ["all"],
        "languages": ["all"],
        "environments": ["all"]
      },
      "examples": [
        {
          "context": {
            "es": "Creando índices en MongoDB para consultas frecuentes",
            "en": "Creating indexes in MongoDB for frequent queries"
          },
          "code": "// Crear índice compuesto para consultas frecuentes por categoría y fecha\ndb.products.createIndex({ category: 1, createdAt: -1 });\n\n// Crear índice de texto para búsquedas textuales\ndb.articles.createIndex({ title: \"text\", content: \"text\" });"
        }
      ],
      "relatedInstructions": ["db_nosql_005", "db_rel_003"]
    },
    {
      "id": "db_nosql_005",
      "title": {
        "es": "Estrategias de particionamiento",
        "en": "Sharding strategies"
      },
      "description": {
        "es": "Implementar estrategias de particionamiento efectivas para escalabilidad",
        "en": "Implement effective sharding strategies for scalability"
      },
      "text": {
        "es": "Implementa estrategias de particionamiento efectivas para escalar horizontalmente bases de datos NoSQL. Selecciona claves de partición que distribuyan uniformemente los datos y minimicen las consultas entre particiones. Considera patrones de acceso, localidad de datos, y evolución de datos al diseñar el esquema de particionamiento. Evita hotspots que pueden degradar el rendimiento y estar preparado para rebalancear particiones a medida que crece la carga de trabajo.",
        "en": "Implement effective sharding strategies to horizontally scale NoSQL databases. Select partition keys that evenly distribute data and minimize cross-partition queries. Consider access patterns, data locality, and data evolution when designing the sharding scheme. Avoid hotspots that can degrade performance and be prepared to rebalance shards as the workload grows."
      },
      "importance": "high",
      "category": "database",
      "subcategory": "nosql_db",
      "tags": ["scalability", "performance", "advanced"],
      "source": {
        "agentType": "devin",
        "repository": "Devin AI/devin.txt",
        "context": "Database Best Practices"
      },
      "compatibility": {
        "frameworks": ["all"],
        "languages": ["all"],
        "environments": ["all"]
      },
      "examples": [
        {
          "context": {
            "es": "Implementando una estrategia de particionamiento en MongoDB",
            "en": "Implementing a sharding strategy in MongoDB"
          },
          "code": "// Habilitar sharding para una base de datos\nsh.enableSharding(\"myDatabase\");\n\n// Crear un índice de sharding en la colección\ndb.products.createIndex({ region: 1, _id: 1 });\n\n// Particionar la colección por región\nsh.shardCollection(\"myDatabase.products\", { region: 1, _id: 1 });"
        }
      ],
      "relatedInstructions": ["db_nosql_004", "db_rel_009"]
    },
    {
      "id": "db_nosql_006",
      "title": {
        "es": "Consistencia y transacciones",
        "en": "Consistency and transactions"
      },
      "description": {
        "es": "Manejar adecuadamente la consistencia y las transacciones en entornos distribuidos",
        "en": "Properly handle consistency and transactions in distributed environments"
      },
      "text": {
        "es": "Gestiona adecuadamente la consistencia de datos y las transacciones en bases de datos NoSQL, reconociendo que muchas soluciones NoSQL favorecen la disponibilidad y tolerancia a particiones sobre la consistencia estricta (teorema CAP). Utiliza patrones de diseño como actualizaciones idempotentes, modelos de consistencia eventual, y compensación para mantener la integridad de los datos. Para casos que requieren garantías transaccionales, considera bases de datos NoSQL que ofrecen transacciones ACID a nivel de documento o implementa patrones como SAGA para coordinar operaciones distribuidas.",
        "en": "Properly manage data consistency and transactions in NoSQL databases, recognizing that many NoSQL solutions favor availability and partition tolerance over strict consistency (CAP theorem). Use design patterns such as idempotent updates, eventual consistency models, and compensation to maintain data integrity. For cases requiring transactional guarantees, consider NoSQL databases that offer document-level ACID transactions or implement patterns like SAGA to coordinate distributed operations."
      },
      "importance": "high",
      "category": "database",
      "subcategory": "nosql_db",
      "tags": ["data_integrity", "distributed_systems", "advanced"],
      "source": {
        "agentType": "devin",
        "repository": "Devin AI/devin.txt",
        "context": "Database Best Practices"
      },
      "compatibility": {
        "frameworks": ["all"],
        "languages": ["all"],
        "environments": ["all"]
      },
      "examples": [
        {
          "context": {
            "es": "Implementando transacciones en MongoDB",
            "en": "Implementing transactions in MongoDB"
          },
          "code": "// Usando transacciones en MongoDB\nconst session = client.startSession();\nsession.startTransaction();\ntry {\n  await collection1.updateOne({ _id: id1 }, { $set: { status: 'processing' } }, { session });\n  await collection2.insertOne({ orderId: id1, ... }, { session });\n  await session.commitTransaction();\n} catch (error) {\n  await session.abortTransaction();\n  throw error;\n} finally {\n  session.endSession();\n}"
        }
      ],
      "relatedInstructions": ["db_nosql_003", "db_rel_004"]
    },
    {
      "id": "db_nosql_007",
      "title": {
        "es": "Estrategias de almacenamiento",
        "en": "Storage strategies"
      },
      "description": {
        "es": "Seleccionar e implementar estrategias de almacenamiento apropiadas",
        "en": "Select and implement appropriate storage strategies"
      },
      "text": {
        "es": "Selecciona e implementa estrategias de almacenamiento apropiadas para bases de datos NoSQL considerando los patrones de acceso, volumen de datos, frecuencia de escrituras/lecturas, y requisitos de rendimiento. Evalúa opciones como almacenamiento en memoria para datos de alta frecuencia de acceso, almacenamiento en disco para datos persistentes, y estrategias híbridas para balancear rendimiento y durabilidad. Considera también políticas de expiración, compresión, y tiering para optimizar el uso de recursos y costos de almacenamiento a largo plazo.",
        "en": "Select and implement appropriate storage strategies for NoSQL databases considering access patterns, data volume, read/write frequencies, and performance requirements. Evaluate options such as in-memory storage for high-frequency access data, disk storage for persistent data, and hybrid strategies to balance performance and durability. Also consider expiration policies, compression, and tiering to optimize resource usage and long-term storage costs."
      },
      "importance": "medium",
      "category": "database",
      "subcategory": "nosql_db",
      "tags": ["performance", "cost_optimization", "advanced"],
      "source": {
        "agentType": "v0",
        "repository": "v0 Prompts and Tools/Prompt.txt",
        "context": "Database Design"
      },
      "compatibility": {
        "frameworks": ["all"],
        "languages": ["all"],
        "environments": ["all"]
      },
      "examples": [
        {
          "context": {
            "es": "Configurando políticas de almacenamiento en Redis",
            "en": "Configuring storage policies in Redis"
          },
          "code": "// Configurar política de expiración para datos de sesión\nREDIS-CLI> SET session:12345 '{...}' EX 3600\n\n// Configurar política de evicción LRU para limitar uso de memoria\nredis.conf: maxmemory 2gb\nredis.conf: maxmemory-policy allkeys-lru"
        }
      ],
      "relatedInstructions": ["db_nosql_001", "db_rel_006"]
    },
    {
      "id": "db_nosql_008",
      "title": {
        "es": "Patrones de consulta específicos",
        "en": "Specific query patterns"
      },
      "description": {
        "es": "Implementar patrones de consulta y acceso específicos para cada tipo de base de datos NoSQL",
        "en": "Implement specific query and access patterns for each NoSQL database type"
      },
      "text": {
        "es": "Implementa patrones de consulta y acceso específicos adaptados al tipo de base de datos NoSQL que estés utilizando. Para bases de datos de documentos, utiliza consultas anidadas e índices compuestos; para bases de datos clave-valor, diseña claves compuestas inteligentes; para bases de datos columnares, optimiza para familias de columnas y consultas de rango; y para bases de datos de grafos, utiliza recorridos y algoritmos de grafos. Comprende las capacidades y limitaciones de consulta de cada tecnología para escribir operaciones eficientes y escalables.",
        "en": "Implement specific query and access patterns tailored to the NoSQL database type you're using. For document databases, utilize nested queries and compound indexes; for key-value databases, design intelligent composite keys; for columnar databases, optimize for column families and range queries; and for graph databases, leverage traversals and graph algorithms. Understand the querying capabilities and limitations of each technology to write efficient and scalable operations."
      },
      "importance": "high",
      "category": "database",
      "subcategory": "nosql_db",
      "tags": ["query_optimization", "database_specific", "universal"],
      "source": {
        "agentType": "devin",
        "repository": "Devin AI/devin.txt",
        "context": "Database Best Practices"
      },
      "compatibility": {
        "frameworks": ["all"],
        "languages": ["all"],
        "environments": ["all"]
      },
      "examples": [
        {
          "context": {
            "es": "Patrones de consulta para diferentes bases de datos NoSQL",
            "en": "Query patterns for different NoSQL databases"
          },
          "code": "// MongoDB: Consulta anidada con proyección\ndb.users.find({ \"address.city\": \"New York\" }, { name: 1, email: 1 })\n\n// Redis: Clave compuesta para rangos\nREDIS-CLI> ZADD user:12345:posts 1621728000 post1 1623024000 post2\nREDIS-CLI> ZRANGEBYSCORE user:12345:posts 1619827200 1625097600\n\n// Cassandra: Consulta optimizada para modelo columnar\nCQL> SELECT * FROM user_events WHERE user_id = 12345 AND event_date > '2023-01-01';\n\n// Neo4j: Recorrido de grafo\nCYPHER> MATCH (user:User {name: 'John'})-[:FOLLOWS*1..2]->(followed) RETURN followed.name;"
        }
      ],
      "relatedInstructions": ["db_nosql_004", "db_qry_001"]
    },
    {
      "id": "db_nosql_009",
      "title": {
        "es": "Manejo de datos polimórficos",
        "en": "Polymorphic data handling"
      },
      "description": {
        "es": "Gestionar eficientemente estructuras de datos variables o polimórficas",
        "en": "Efficiently manage variable or polymorphic data structures"
      },
      "text": {
        "es": "Gestiona eficientemente estructuras de datos variables o polimórficas en bases de datos NoSQL, aprovechando la flexibilidad inherente de estos sistemas. Implementa patrones como discriminadores de tipo, herencia con composición, o esquemas híbridos para manejar entidades con atributos variables. Establece convenciones claras para identificar tipos de documentos y validar estructuras. Equilibra la flexibilidad con la consistencia implementando validación de esquemas cuando sea apropiado, manteniendo la coherencia de los datos sin perder las ventajas de la flexibilidad del esquema.",
        "en": "Efficiently manage variable or polymorphic data structures in NoSQL databases, leveraging the inherent flexibility of these systems. Implement patterns such as type discriminators, inheritance with composition, or hybrid schemas to handle entities with varying attributes. Establish clear conventions for identifying document types and validating structures. Balance flexibility with consistency by implementing schema validation where appropriate, maintaining data coherence without losing the advantages of schema flexibility."
      },
      "importance": "medium",
      "category": "database",
      "subcategory": "nosql_db",
      "tags": ["schema_design", "data_modeling", "advanced"],
      "source": {
        "agentType": "v0",
        "repository": "v0 Prompts and Tools/Prompt.txt",
        "context": "Database Design"
      },
      "compatibility": {
        "frameworks": ["all"],
        "languages": ["all"],
        "environments": ["all"]
      },
      "examples": [
        {
          "context": {
            "es": "Manejando datos polimórficos en MongoDB",
            "en": "Handling polymorphic data in MongoDB"
          },
          "code": "// Usando discriminador de tipo para contenido mixto\n{\n  \"_id\": \"item1\",\n  \"type\": \"article\",\n  \"title\": \"NoSQL Best Practices\",\n  \"content\": \"...\",\n  \"author\": \"Jane Doe\"\n}\n\n{\n  \"_id\": \"item2\",\n  \"type\": \"video\",\n  \"title\": \"NoSQL Tutorial\",\n  \"duration\": 3600,\n  \"resolution\": \"1080p\",\n  \"creator\": \"John Smith\"\n}"
        }
      ],
      "relatedInstructions": ["db_nosql_003", "db_mod_003"]
    },
    {
      "id": "db_nosql_010",
      "title": {
        "es": "Manejo de relaciones",
        "en": "Relationship handling"
      },
      "description": {
        "es": "Implementar estrategias para manejar relaciones entre entidades",
        "en": "Implement strategies for handling relationships between entities"
      },
      "text": {
        "es": "Implementa estrategias apropiadas para manejar relaciones entre entidades en bases de datos NoSQL, basadas en patrones de acceso y características específicas de la base de datos. Utiliza embebido para relaciones uno-a-pocos con acceso conjunto frecuente, referencia para relaciones uno-a-muchos o muchos-a-muchos donde el embebido causaría documentos excesivamente grandes, y denormalización controlada para optimizar patrones de lectura comunes. Para relaciones complejas, considera usar múltiples representaciones de la misma relación optimizadas para diferentes patrones de consulta.",
        "en": "Implement appropriate strategies for handling relationships between entities in NoSQL databases, based on access patterns and database-specific characteristics. Use embedding for one-to-few relationships with frequent joint access, referencing for one-to-many or many-to-many relationships where embedding would cause excessively large documents, and controlled denormalization to optimize for common read patterns. For complex relationships, consider using multiple representations of the same relationship optimized for different query patterns."
      },
      "importance": "high",
      "category": "database",
      "subcategory": "nosql_db",
      "tags": ["data_modeling", "schema_design", "universal"],
      "source": {
        "agentType": "devin",
        "repository": "Devin AI/devin.txt",
        "context": "Database Best Practices"
      },
      "compatibility": {
        "frameworks": ["all"],
        "languages": ["all"],
        "environments": ["all"]
      },
      "examples": [
        {
          "context": {
            "es": "Estrategias para manejar relaciones en MongoDB",
            "en": "Strategies for handling relationships in MongoDB"
          },
          "code": "// Embebido: Relación uno-a-pocos (usuario y direcciones)\n{\n  \"_id\": \"user123\",\n  \"name\": \"John Doe\",\n  \"addresses\": [\n    { \"type\": \"home\", \"street\": \"123 Main St\", \"city\": \"Springfield\" },\n    { \"type\": \"work\", \"street\": \"456 Market St\", \"city\": \"Springfield\" }\n  ]\n}\n\n// Referencia: Relación uno-a-muchos (usuario y pedidos)\n// Usuario: { \"_id\": \"user123\", \"name\": \"John Doe\" }\n// Pedidos: [{ \"_id\": \"order1\", \"user_id\": \"user123\", ... }]"
        }
      ],
      "relatedInstructions": ["db_nosql_002", "db_rel_001"]
    },
    {
      "id": "db_nosql_011",
      "title": {
        "es": "Gestión de consistencia eventual",
        "en": "Eventual consistency management"
      },
      "description": {
        "es": "Implementar estrategias para manejar la consistencia eventual en sistemas distribuidos",
        "en": "Implement strategies for handling eventual consistency in distributed systems"
      },
      "text": {
        "es": "Implementa estrategias efectivas para manejar la consistencia eventual en sistemas NoSQL distribuidos. Utiliza patrones como marcas de tiempo lógicas, versiones de documentos o relojes vectoriales para detectar y resolver conflictos. Diseña la experiencia del usuario para manejar la naturaleza eventual de la consistencia, como mostrar estados transitorios, proporcionar retroalimentación sobre la propagación de cambios, o implementar mecanismos para reconciliar automáticamente conflictos siguiendo reglas predefinidas basadas en la lógica del negocio.",
        "en": "Implement effective strategies for handling eventual consistency in distributed NoSQL systems. Use patterns such as logical timestamps, document versioning, or vector clocks to detect and resolve conflicts. Design the user experience to handle the eventual nature of consistency, such as showing transitional states, providing feedback on change propagation, or implementing mechanisms to automatically reconcile conflicts following predefined rules based on business logic."
      },
      "importance": "high",
      "category": "database",
      "subcategory": "nosql_db",
      "tags": ["distributed_systems", "data_integrity", "advanced"],
      "source": {
        "agentType": "devin",
        "repository": "Devin AI/devin.txt",
        "context": "Database Best Practices"
      },
      "compatibility": {
        "frameworks": ["all"],
        "languages": ["all"],
        "environments": ["all"]
      },
      "examples": [
        {
          "context": {
            "es": "Manejando consistencia eventual en una aplicación distribuida",
            "en": "Handling eventual consistency in a distributed application"
          },
          "code": "// Usar versiones para detección de conflictos\n{\n  \"_id\": \"product123\",\n  \"version\": 5,\n  \"name\": \"Smartphone\",\n  \"price\": 599,\n  \"lastUpdated\": \"2023-05-15T14:30:00Z\"\n}\n\n// Implementar resolución de conflictos basada en reglas\nfunction resolveConflict(localDoc, remoteDoc) {\n  if (localDoc.version > remoteDoc.version) return localDoc;\n  if (remoteDoc.version > localDoc.version) return remoteDoc;\n  // Misma versión, resolver por timestamp\n  return new Date(localDoc.lastUpdated) > new Date(remoteDoc.lastUpdated) ? localDoc : remoteDoc;\n}"
        }
      ],
      "relatedInstructions": ["db_nosql_006", "db_nosql_013"]
    },
    {
      "id": "db_nosql_012",
      "title": {
        "es": "Estrategias de respaldo y recuperación",
        "en": "Backup and recovery strategies"
      },
      "description": {
        "es": "Implementar estrategias efectivas de respaldo y recuperación para bases de datos NoSQL",
        "en": "Implement effective backup and recovery strategies for NoSQL databases"
      },
      "text": {
        "es": "Implementa estrategias efectivas de respaldo y recuperación para bases de datos NoSQL, considerando la naturaleza distribuida y la escala de estos sistemas. Utiliza una combinación de instantáneas (snapshots), respaldos incrementales, y replicación para cubrir diversos escenarios de recuperación. Diseña estrategias que minimicen el impacto en el rendimiento del sistema en producción y planifica para diferentes niveles de recuperación, desde la restauración de documentos individuales hasta la recuperación completa del sistema. Prueba regularmente los procesos de respaldo y recuperación para verificar su efectividad.",
        "en": "Implement effective backup and recovery strategies for NoSQL databases, considering the distributed nature and scale of these systems. Use a combination of snapshots, incremental backups, and replication to cover various recovery scenarios. Design strategies that minimize impact on production system performance and plan for different levels of recovery, from individual document restoration to full system recovery. Regularly test backup and recovery processes to verify their effectiveness."
      },
      "importance": "high",
      "category": "database",
      "subcategory": "nosql_db",
      "tags": ["data_protection", "disaster_recovery", "universal"],
      "source": {
        "agentType": "devin",
        "repository": "Devin AI/devin.txt",
        "context": "Database Best Practices"
      },
      "compatibility": {
        "frameworks": ["all"],
        "languages": ["all"],
        "environments": ["all"]
      },
      "examples": [
        {
          "context": {
            "es": "Implementando estrategias de respaldo para MongoDB",
            "en": "Implementing backup strategies for MongoDB"
          },
          "code": "// Respaldo completo con mongodump\n$ mongodump --uri=\"mongodb://username:password@host:port/dbname\" --out=/backups/$(date +%Y-%m-%d)\n\n// Respaldo incremental basado en oplog\n$ mongodump --uri=\"mongodb://username:password@host:port/dbname\" --oplog --out=/backups/incremental/$(date +%Y-%m-%d-%H-%M)\n\n// Restauración completa\n$ mongorestore --uri=\"mongodb://username:password@host:port/dbname\" --dir=/backups/2023-05-15"
        }
      ],
      "relatedInstructions": ["db_bkp_001", "db_nosql_011"]
    },
    {
      "id": "db_nosql_013",
      "title": {
        "es": "Manejo de datos a gran escala",
        "en": "Large-scale data handling"
      },
      "description": {
        "es": "Implementar estrategias para gestionar datos a gran escala en bases de datos NoSQL",
        "en": "Implement strategies for handling large-scale data in NoSQL databases"
      },
      "text": {
        "es": "Implementa estrategias efectivas para manejar datos a gran escala en bases de datos NoSQL, considerando tanto el volumen como la velocidad de ingesta. Utiliza técnicas como bucketing, time-series sharding, y compresión para conjuntos de datos masivos. Implementa políticas de ciclo de vida de datos para trasladar datos históricos a almacenamiento más económico, y utiliza estrategias de agregación y pre-computación para análisis eficientes. Considera también patrones como Command Query Responsibility Segregation (CQRS) para separar las cargas de trabajo de escritura y lectura en sistemas de alto rendimiento.",
        "en": "Implement effective strategies for handling large-scale data in NoSQL databases, considering both volume and ingestion velocity. Use techniques such as bucketing, time-series sharding, and compression for massive datasets. Implement data lifecycle policies to move historical data to more cost-effective storage, and use aggregation and pre-computation strategies for efficient analytics. Also consider patterns like Command Query Responsibility Segregation (CQRS) to separate write and read workloads in high-performance systems."
      },
      "importance": "high",
      "category": "database",
      "subcategory": "nosql_db",
      "tags": ["big_data", "performance", "advanced"],
      "source": {
        "agentType": "devin",
        "repository": "Devin AI/devin.txt",
        "context": "Database Best Practices"
      },
      "compatibility": {
        "frameworks": ["all"],
        "languages": ["all"],
        "environments": ["all"]
      },
      "examples": [
        {
          "context": {
            "es": "Implementando estrategias para datos de series temporales",
            "en": "Implementing strategies for time series data"
          },
          "code": "// MongoDB: Sharding por rango de tiempo para datos de telemetría\nsh.shardCollection(\"metrics.readings\", { deviceId: 1, timestamp: 1 });\n\n// Cassandra: Diseño de tabla optimizado para series temporales\nCREATE TABLE sensor_data (\n  sensor_id text,\n  date text,\n  hour int,\n  timestamp timestamp,\n  value double,\n  PRIMARY KEY ((sensor_id, date), hour, timestamp)\n);"
        }
      ],
      "relatedInstructions": ["db_nosql_005", "db_nosql_007"]
    },
    {
      "id": "db_nosql_014",
      "title": {
        "es": "Gestión de cambios de esquema",
        "en": "Schema evolution management"
      },
      "description": {
        "es": "Implementar estrategias para gestionar la evolución de esquemas en bases de datos NoSQL",
        "en": "Implement strategies for managing schema evolution in NoSQL databases"
      },
      "text": {
        "es": "Implementa estrategias efectivas para gestionar la evolución de esquemas en bases de datos NoSQL cuando los requisitos de la aplicación cambian. Utiliza técnicas como versionado de esquema, migraciones progresivas, o transformaciones en lectura/escritura para mantener la compatibilidad con datos existentes. Evita cambios disruptivos que requieran tiempo de inactividad, favoreciendo enfoques incrementales que permitan actualizaciones graduales. Implementa sistemas de validación para mantener la integridad de los datos durante y después de las transiciones de esquema.",
        "en": "Implement effective strategies for managing schema evolution in NoSQL databases as application requirements change. Use techniques such as schema versioning, progressive migrations, or read/write transformations to maintain compatibility with existing data. Avoid disruptive changes that require downtime, favoring incremental approaches that allow for gradual updates. Implement validation systems to maintain data integrity during and after schema transitions."
      },
      "importance": "high",
      "category": "database",
      "subcategory": "nosql_db",
      "tags": ["schema_design", "maintainability", "universal"],
      "source": {
        "agentType": "v0",
        "repository": "v0 Prompts and Tools/Prompt.txt",
        "context": "Database Design"
      },
      "compatibility": {
        "frameworks": ["all"],
        "languages": ["all"],
        "environments": ["all"]
      },
      "examples": [
        {
          "context": {
            "es": "Gestión de evolución de esquemas en MongoDB",
            "en": "Managing schema evolution in MongoDB"
          },
          "code": "// 1. Añadir campo con migración progresiva\ndb.users.updateMany(\n  { newField: { $exists: false } },\n  { $set: { newField: defaultValue } }\n);\n\n// 2. Transformación en lectura para compatibilidad\nfunction readUser(userId) {\n  const user = db.users.findOne({ _id: userId });\n  // Transformación para compatibilidad con versión anterior\n  if (!user.newStructure) {\n    user.newField = computeFromLegacyFields(user);\n  }\n  return user;\n}"
        }
      ],
      "relatedInstructions": ["db_nosql_003", "db_mig_001"]
    },
    {
      "id": "db_nosql_015",
      "title": {
        "es": "Monitoreo y optimización",
        "en": "Monitoring and optimization"
      },
      "description": {
        "es": "Implementar estrategias efectivas de monitoreo y optimización para bases de datos NoSQL",
        "en": "Implement effective monitoring and optimization strategies for NoSQL databases"
      },
      "text": {
        "es": "Implementa estrategias efectivas de monitoreo y optimización para bases de datos NoSQL para garantizar rendimiento, escalabilidad y confiabilidad. Establece monitoreo proactivo de métricas clave como latencia de operaciones, tasas de error, patrones de uso de recursos, y distribución de datos entre particiones. Analiza y optimiza consultas lentas, implementa políticas de escalado automático basadas en patrones de carga previsibles, y realiza mantenimiento regular como compactación y rebalanceo. Utiliza perfilado de consultas y análisis de patrones de acceso para identificar oportunidades de optimización.",
        "en": "Implement effective monitoring and optimization strategies for NoSQL databases to ensure performance, scalability, and reliability. Establish proactive monitoring of key metrics such as operation latency, error rates, resource usage patterns, and data distribution across partitions. Analyze and optimize slow queries, implement auto-scaling policies based on predictable load patterns, and perform regular maintenance such as compaction and rebalancing. Use query profiling and access pattern analysis to identify optimization opportunities."
      },
      "importance": "high",
      "category": "database",
      "subcategory": "nosql_db",
      "tags": ["performance", "monitoring", "universal"],
      "source": {
        "agentType": "devin",
        "repository": "Devin AI/devin.txt",
        "context": "Database Best Practices"
      },
      "compatibility": {
        "frameworks": ["all"],
        "languages": ["all"],
        "environments": ["all"]
      },
      "examples": [
        {
          "context": {
            "es": "Estrategias de monitoreo para bases de datos NoSQL",
            "en": "Monitoring strategies for NoSQL databases"
          },
          "code": "// MongoDB: Habilitar perfilado de consultas\ndb.setProfilingLevel(1, { slowms: 100 });\n\n// Redis: Monitorear estadísticas de rendimiento\nREDIS-CLI> INFO stats\nREDIS-CLI> SLOWLOG GET 10\n\n// Cassandra: Establecer umbrales de alerta\n// En nodetool.yaml\nthresholds:\n  heap_usage_warning: 0.75\n  heap_usage_failure: 0.90\n  read_latency_warning: 100ms\n  write_latency_warning: 50ms"
        }
      ],
      "relatedInstructions": ["db_nosql_004", "db_nosql_013"]
    }
  ]
}