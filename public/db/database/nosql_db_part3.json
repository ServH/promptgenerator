{
  "instructions": [
    {
      "id": "db_nosql_011",
      "title": {
        "es": "Gestión de consistencia eventual",
        "en": "Eventual consistency management"
      },
      "description": {
        "es": "Implementar estrategias para manejar la consistencia eventual en sistemas distribuidos",
        "en": "Implement strategies for handling eventual consistency in distributed systems"
      },
      "text": {
        "es": "Implementa estrategias efectivas para manejar la consistencia eventual en sistemas NoSQL distribuidos. Utiliza patrones como marcas de tiempo lógicas, versiones de documentos o relojes vectoriales para detectar y resolver conflictos. Diseña la experiencia del usuario para manejar la naturaleza eventual de la consistencia, como mostrar estados transitorios, proporcionar retroalimentación sobre la propagación de cambios, o implementar mecanismos para reconciliar automáticamente conflictos siguiendo reglas predefinidas basadas en la lógica del negocio.",
        "en": "Implement effective strategies for handling eventual consistency in distributed NoSQL systems. Use patterns such as logical timestamps, document versioning, or vector clocks to detect and resolve conflicts. Design the user experience to handle the eventual nature of consistency, such as showing transitional states, providing feedback on change propagation, or implementing mechanisms to automatically reconcile conflicts following predefined rules based on business logic."
      },
      "importance": "high",
      "category": "database",
      "subcategory": "nosql_db",
      "tags": ["distributed_systems", "data_integrity", "advanced"],
      "source": {
        "agentType": "devin",
        "repository": "Devin AI/devin.txt",
        "context": "Database Best Practices"
      },
      "compatibility": {
        "frameworks": ["all"],
        "languages": ["all"],
        "environments": ["all"]
      },
      "examples": [
        {
          "context": {
            "es": "Manejando consistencia eventual en una aplicación distribuida",
            "en": "Handling eventual consistency in a distributed application"
          },
          "code": "// Usar versiones para detección de conflictos\n{\n  \"_id\": \"product123\",\n  \"version\": 5,\n  \"name\": \"Smartphone\",\n  \"price\": 599,\n  \"lastUpdated\": \"2023-05-15T14:30:00Z\"\n}\n\n// Implementar resolución de conflictos basada en reglas\nfunction resolveConflict(localDoc, remoteDoc) {\n  if (localDoc.version > remoteDoc.version) return localDoc;\n  if (remoteDoc.version > localDoc.version) return remoteDoc;\n  // Misma versión, resolver por timestamp\n  return new Date(localDoc.lastUpdated) > new Date(remoteDoc.lastUpdated) ? localDoc : remoteDoc;\n}"
        }
      ],
      "relatedInstructions": ["db_nosql_006", "db_nosql_013"]
    },
    {
      "id": "db_nosql_012",
      "title": {
        "es": "Estrategias de respaldo y recuperación",
        "en": "Backup and recovery strategies"
      },
      "description": {
        "es": "Implementar estrategias efectivas de respaldo y recuperación para bases de datos NoSQL",
        "en": "Implement effective backup and recovery strategies for NoSQL databases"
      },
      "text": {
        "es": "Implementa estrategias efectivas de respaldo y recuperación para bases de datos NoSQL, considerando la naturaleza distribuida y la escala de estos sistemas. Utiliza una combinación de instantáneas (snapshots), respaldos incrementales, y replicación para cubrir diversos escenarios de recuperación. Diseña estrategias que minimicen el impacto en el rendimiento del sistema en producción y planifica para diferentes niveles de recuperación, desde la restauración de documentos individuales hasta la recuperación completa del sistema. Prueba regularmente los procesos de respaldo y recuperación para verificar su efectividad.",
        "en": "Implement effective backup and recovery strategies for NoSQL databases, considering the distributed nature and scale of these systems. Use a combination of snapshots, incremental backups, and replication to cover various recovery scenarios. Design strategies that minimize impact on production system performance and plan for different levels of recovery, from individual document restoration to full system recovery. Regularly test backup and recovery processes to verify their effectiveness."
      },
      "importance": "high",
      "category": "database",
      "subcategory": "nosql_db",
      "tags": ["data_protection", "disaster_recovery", "universal"],
      "source": {
        "agentType": "devin",
        "repository": "Devin AI/devin.txt",
        "context": "Database Best Practices"
      },
      "compatibility": {
        "frameworks": ["all"],
        "languages": ["all"],
        "environments": ["all"]
      },
      "examples": [
        {
          "context": {
            "es": "Implementando estrategias de respaldo para MongoDB",
            "en": "Implementing backup strategies for MongoDB"
          },
          "code": "// Respaldo completo con mongodump\n$ mongodump --uri=\"mongodb://username:password@host:port/dbname\" --out=/backups/$(date +%Y-%m-%d)\n\n// Respaldo incremental basado en oplog\n$ mongodump --uri=\"mongodb://username:password@host:port/dbname\" --oplog --out=/backups/incremental/$(date +%Y-%m-%d-%H-%M)\n\n// Restauración completa\n$ mongorestore --uri=\"mongodb://username:password@host:port/dbname\" --dir=/backups/2023-05-15"
        }
      ],
      "relatedInstructions": ["db_bkp_001", "db_nosql_011"]
    },
    {
      "id": "db_nosql_013",
      "title": {
        "es": "Manejo de datos a gran escala",
        "en": "Large-scale data handling"
      },
      "description": {
        "es": "Implementar estrategias para gestionar datos a gran escala en bases de datos NoSQL",
        "en": "Implement strategies for handling large-scale data in NoSQL databases"
      },
      "text": {
        "es": "Implementa estrategias efectivas para manejar datos a gran escala en bases de datos NoSQL, considerando tanto el volumen como la velocidad de ingesta. Utiliza técnicas como bucketing, time-series sharding, y compresión para conjuntos de datos masivos. Implementa políticas de ciclo de vida de datos para trasladar datos históricos a almacenamiento más económico, y utiliza estrategias de agregación y pre-computación para análisis eficientes. Considera también patrones como Command Query Responsibility Segregation (CQRS) para separar las cargas de trabajo de escritura y lectura en sistemas de alto rendimiento.",
        "en": "Implement effective strategies for handling large-scale data in NoSQL databases, considering both volume and ingestion velocity. Use techniques such as bucketing, time-series sharding, and compression for massive datasets. Implement data lifecycle policies to move historical data to more cost-effective storage, and use aggregation and pre-computation strategies for efficient analytics. Also consider patterns like Command Query Responsibility Segregation (CQRS) to separate write and read workloads in high-performance systems."
      },
      "importance": "high",
      "category": "database",
      "subcategory": "nosql_db",
      "tags": ["big_data", "performance", "advanced"],
      "source": {
        "agentType": "devin",
        "repository": "Devin AI/devin.txt",
        "context": "Database Best Practices"
      },
      "compatibility": {
        "frameworks": ["all"],
        "languages": ["all"],
        "environments": ["all"]
      },
      "examples": [
        {
          "context": {
            "es": "Implementando estrategias para datos de series temporales",
            "en": "Implementing strategies for time series data"
          },
          "code": "// MongoDB: Sharding por rango de tiempo para datos de telemetría\nsh.shardCollection(\"metrics.readings\", { deviceId: 1, timestamp: 1 });\n\n// Cassandra: Diseño de tabla optimizado para series temporales\nCREATE TABLE sensor_data (\n  sensor_id text,\n  date text,\n  hour int,\n  timestamp timestamp,\n  value double,\n  PRIMARY KEY ((sensor_id, date), hour, timestamp)\n);"
        }
      ],
      "relatedInstructions": ["db_nosql_005", "db_nosql_007"]
    },
    {
      "id": "db_nosql_014",
      "title": {
        "es": "Gestión de cambios de esquema",
        "en": "Schema evolution management"
      },
      "description": {
        "es": "Implementar estrategias para gestionar la evolución de esquemas en bases de datos NoSQL",
        "en": "Implement strategies for managing schema evolution in NoSQL databases"
      },
      "text": {
        "es": "Implementa estrategias efectivas para gestionar la evolución de esquemas en bases de datos NoSQL cuando los requisitos de la aplicación cambian. Utiliza técnicas como versionado de esquema, migraciones progresivas, o transformaciones en lectura/escritura para mantener la compatibilidad con datos existentes. Evita cambios disruptivos que requieran tiempo de inactividad, favoreciendo enfoques incrementales que permitan actualizaciones graduales. Implementa sistemas de validación para mantener la integridad de los datos durante y después de las transiciones de esquema.",
        "en": "Implement effective strategies for managing schema evolution in NoSQL databases as application requirements change. Use techniques such as schema versioning, progressive migrations, or read/write transformations to maintain compatibility with existing data. Avoid disruptive changes that require downtime, favoring incremental approaches that allow for gradual updates. Implement validation systems to maintain data integrity during and after schema transitions."
      },
      "importance": "high",
      "category": "database",
      "subcategory": "nosql_db",
      "tags": ["schema_design", "maintainability", "universal"],
      "source": {
        "agentType": "v0",
        "repository": "v0 Prompts and Tools/Prompt.txt",
        "context": "Database Design"
      },
      "compatibility": {
        "frameworks": ["all"],
        "languages": ["all"],
        "environments": ["all"]
      },
      "examples": [
        {
          "context": {
            "es": "Gestión de evolución de esquemas en MongoDB",
            "en": "Managing schema evolution in MongoDB"
          },
          "code": "// 1. Añadir campo con migración progresiva\ndb.users.updateMany(\n  { newField: { $exists: false } },\n  { $set: { newField: defaultValue } }\n);\n\n// 2. Transformación en lectura para compatibilidad\nfunction readUser(userId) {\n  const user = db.users.findOne({ _id: userId });\n  // Transformación para compatibilidad con versión anterior\n  if (!user.newStructure) {\n    user.newField = computeFromLegacyFields(user);\n  }\n  return user;\n}"
        }
      ],
      "relatedInstructions": ["db_nosql_003", "db_mig_001"]
    },
    {
      "id": "db_nosql_015",
      "title": {
        "es": "Monitoreo y optimización",
        "en": "Monitoring and optimization"
      },
      "description": {
        "es": "Implementar estrategias efectivas de monitoreo y optimización para bases de datos NoSQL",
        "en": "Implement effective monitoring and optimization strategies for NoSQL databases"
      },
      "text": {
        "es": "Implementa estrategias efectivas de monitoreo y optimización para bases de datos NoSQL para garantizar rendimiento, escalabilidad y confiabilidad. Establece monitoreo proactivo de métricas clave como latencia de operaciones, tasas de error, patrones de uso de recursos, y distribución de datos entre particiones. Analiza y optimiza consultas lentas, implementa políticas de escalado automático basadas en patrones de carga previsibles, y realiza mantenimiento regular como compactación y rebalanceo. Utiliza perfilado de consultas y análisis de patrones de acceso para identificar oportunidades de optimización.",
        "en": "Implement effective monitoring and optimization strategies for NoSQL databases to ensure performance, scalability, and reliability. Establish proactive monitoring of key metrics such as operation latency, error rates, resource usage patterns, and data distribution across partitions. Analyze and optimize slow queries, implement auto-scaling policies based on predictable load patterns, and perform regular maintenance such as compaction and rebalancing. Use query profiling and access pattern analysis to identify optimization opportunities."
      },
      "importance": "high",
      "category": "database",
      "subcategory": "nosql_db",
      "tags": ["performance", "monitoring", "universal"],
      "source": {
        "agentType": "devin",
        "repository": "Devin AI/devin.txt",
        "context": "Database Best Practices"
      },
      "compatibility": {
        "frameworks": ["all"],
        "languages": ["all"],
        "environments": ["all"]
      },
      "examples": [
        {
          "context": {
            "es": "Estrategias de monitoreo para bases de datos NoSQL",
            "en": "Monitoring strategies for NoSQL databases"
          },
          "code": "// MongoDB: Habilitar perfilado de consultas\ndb.setProfilingLevel(1, { slowms: 100 });\n\n// Redis: Monitorear estadísticas de rendimiento\nREDIS-CLI> INFO stats\nREDIS-CLI> SLOWLOG GET 10\n\n// Cassandra: Establecer umbrales de alerta\n// En nodetool.yaml\nthresholds:\n  heap_usage_warning: 0.75\n  heap_usage_failure: 0.90\n  read_latency_warning: 100ms\n  write_latency_warning: 50ms"
        }
      ],
      "relatedInstructions": ["db_nosql_004", "db_nosql_013"]
    }
  ]
}