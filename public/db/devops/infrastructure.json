{
  "instructions": [
    {
      "id": "devops007",
      "title": {
        "es": "Implementar Infraestructura como Código (IaC)",
        "en": "Implement Infrastructure as Code (IaC)"
      },
      "description": {
        "es": "Gestionar infraestructura mediante archivos de definición versionados",
        "en": "Manage infrastructure using versioned definition files"
      },
      "text": {
        "es": "Implementa Infraestructura como Código (IaC) para gestionar recursos de infraestructura de manera declarativa a través de archivos de configuración versionados. Utiliza herramientas como Terraform, AWS CloudFormation, o Pulumi para definir todos los aspectos de la infraestructura en archivos que pueden ser revisados, compartidos y versionados como código normal. Aplica principios de modularidad, sigue el principio DRY (Don't Repeat Yourself), implementa control de versiones con Git, y documenta adecuadamente los recursos. Las ventajas incluyen consistencia, reproducibilidad, automatización, y la capacidad de aplicar prácticas de ingeniería de software a la infraestructura.",
        "en": "Implement Infrastructure as Code (IaC) to manage infrastructure resources declaratively through versioned configuration files. Use tools such as Terraform, AWS CloudFormation, or Pulumi to define all aspects of infrastructure in files that can be reviewed, shared, and versioned like normal code. Apply modularity principles, follow the DRY (Don't Repeat Yourself) principle, implement version control with Git, and properly document resources. Benefits include consistency, reproducibility, automation, and the ability to apply software engineering practices to infrastructure."
      },
      "importance": "high",
      "category": "infrastructure",
      "subcategory": "iac",
      "tags": ["devops", "cloud", "automation"],
      "source": {
        "agentType": "devin",
        "repository": "Devin AI/devin.txt",
        "context": "Infrastructure section"
      },
      "compatibility": {
        "frameworks": ["terraform", "cloudformation", "pulumi", "ansible"],
        "languages": ["hcl", "yaml", "json", "python"],
        "environments": ["aws", "azure", "gcp", "kubernetes"]
      },
      "examples": [
        {
          "context": {
            "es": "Ejemplo de infraestructura con Terraform para AWS",
            "en": "Example of infrastructure with Terraform for AWS"
          },
          "code": "# main.tf - Ejemplo de infraestructura para aplicación web en AWS con Terraform\n\n# Configuración del proveedor AWS\nprovider \"aws\" {\n  region = var.aws_region\n}\n\n# Variables (definidas en variables.tf)\nvariable \"aws_region\" {\n  description = \"La región de AWS donde se desplegará la infraestructura\"\n  type        = string\n  default     = \"us-west-2\"\n}\n\nvariable \"app_name\" {\n  description = \"Nombre de la aplicación\"\n  type        = string\n  default     = \"myapp\"\n}\n\nvariable \"environment\" {\n  description = \"Entorno de despliegue\"\n  type        = string\n  default     = \"production\"\n}\n\n# Módulo para la red (VPC, subnets, etc.)\nmodule \"network\" {\n  source = \"./modules/network\"\n  \n  app_name    = var.app_name\n  environment = var.environment\n  vpc_cidr    = \"10.0.0.0/16\"\n  azs         = [\"${var.aws_region}a\", \"${var.aws_region}b\", \"${var.aws_region}c\"]\n  \n  tags = local.common_tags\n}\n\n# Variables locales\nlocals {\n  common_tags = {\n    Project     = var.app_name\n    Environment = var.environment\n    ManagedBy   = \"terraform\"\n    Owner       = \"devops-team\"\n  }\n}\n\n# Grupo de seguridad para el balanceador de carga\nresource \"aws_security_group\" \"alb\" {\n  name        = \"${var.app_name}-${var.environment}-alb-sg\"\n  description = \"Controla el acceso al ALB\"\n  vpc_id      = module.network.vpc_id\n  \n  # Permitir tráfico HTTP desde cualquier lugar\n  ingress {\n    from_port   = 80\n    to_port     = 80\n    protocol    = \"tcp\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n  \n  # Permitir tráfico HTTPS desde cualquier lugar\n  ingress {\n    from_port   = 443\n    to_port     = 443\n    protocol    = \"tcp\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n  \n  # Permitir todo el tráfico de salida\n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = \"-1\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n  \n  tags = merge(\n    local.common_tags,\n    {\n      Name = \"${var.app_name}-${var.environment}-alb-sg\"\n    }\n  )\n}\n\n# Grupo de seguridad para instancias EC2\nresource \"aws_security_group\" \"ec2\" {\n  name        = \"${var.app_name}-${var.environment}-ec2-sg\"\n  description = \"Controla el acceso a las instancias EC2\"\n  vpc_id      = module.network.vpc_id\n  \n  # Permitir tráfico solo desde el ALB\n  ingress {\n    from_port       = 80\n    to_port         = 80\n    protocol        = \"tcp\"\n    security_groups = [aws_security_group.alb.id]\n  }\n  \n  # Permitir SSH desde redes de administración (reemplazar con tu CIDR)\n  ingress {\n    from_port   = 22\n    to_port     = 22\n    protocol    = \"tcp\"\n    cidr_blocks = [\"10.0.0.0/8\"]\n  }\n  \n  # Permitir todo el tráfico de salida\n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = \"-1\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n  \n  tags = merge(\n    local.common_tags,\n    {\n      Name = \"${var.app_name}-${var.environment}-ec2-sg\"\n    }\n  )\n}"
        }
      ],
      "relatedInstructions": ["devops005", "devops008"]
    },
    {
      "id": "devops008",
      "title": {
        "es": "Configurar arquitectura de microservicios en la nube",
        "en": "Configure cloud microservices architecture"
      },
      "description": {
        "es": "Implementar aplicaciones basadas en microservicios utilizando servicios cloud",
        "en": "Implement microservices-based applications using cloud services"
      },
      "text": {
        "es": "Configura una arquitectura de microservicios en la nube para construir aplicaciones escalables, resilientes y flexibles. Divide la aplicación en servicios independientes con responsabilidades bien definidas, implementa comunicación asíncrona basada en eventos donde sea apropiado, utiliza API Gateways para enrutar solicitudes, y aprovecha servicios gestionados de la nube para reducir la sobrecarga operativa. Implementa descubrimiento de servicios, seguimiento distribuido, y monitoreo centralizado. Asegúrate de que cada microservicio tiene su propio ciclo de vida de desarrollo e implementación, incluyendo un pipeline CI/CD independiente y almacenamiento de datos aislado cuando sea necesario.",
        "en": "Configure a cloud microservices architecture to build scalable, resilient, and flexible applications. Divide the application into independent services with well-defined responsibilities, implement event-based asynchronous communication where appropriate, use API Gateways to route requests, and leverage managed cloud services to reduce operational overhead. Implement service discovery, distributed tracing, and centralized monitoring. Ensure each microservice has its own development and deployment lifecycle, including an independent CI/CD pipeline and isolated data storage when necessary."
      },
      "importance": "high",
      "category": "infrastructure",
      "subcategory": "cloud_architecture",
      "tags": ["devops", "microservices", "cloud"],
      "source": {
        "agentType": "v0",
        "repository": "v0 Prompts and Tools/Prompt.txt",
        "context": "Cloud Architecture section"
      },
      "compatibility": {
        "frameworks": ["spring-boot", "express", "fastapi", "django"],
        "languages": ["java", "javascript", "python", "go"],
        "environments": ["aws", "azure", "gcp", "kubernetes"]
      },
      "examples": [
        {
          "context": {
            "es": "Ejemplo de arquitectura de microservicios en AWS",
            "en": "Example of microservices architecture in AWS"
          },
          "code": "# Arquitectura de microservicios en AWS con Terraform\n\n# Componentes principales:\n# 1. API Gateway para entrada de solicitudes\n# 2. Servicios como funciones Lambda/contenedores ECS\n# 3. Mensajería asíncrona con Amazon SQS/SNS\n# 4. Almacenamiento especializado por servicio (DynamoDB/RDS)\n# 5. Monitoreo centralizado con CloudWatch\n\n# Configuración de API Gateway\nresource \"aws_api_gateway_rest_api\" \"main\" {\n  name        = \"${var.app_name}-api\"\n  description = \"API Gateway para microservicios de ${var.app_name}\"\n  \n  endpoint_configuration {\n    types = [\"REGIONAL\"]\n  }\n  \n  tags = local.common_tags\n}\n\n# Recurso de API Gateway para el servicio de usuarios\nresource \"aws_api_gateway_resource\" \"users\" {\n  rest_api_id = aws_api_gateway_rest_api.main.id\n  parent_id   = aws_api_gateway_rest_api.main.root_resource_id\n  path_part   = \"users\"\n}\n\n# Método y configuración de integración para el servicio de usuarios\nresource \"aws_api_gateway_method\" \"users_get\" {\n  rest_api_id   = aws_api_gateway_rest_api.main.id\n  resource_id   = aws_api_gateway_resource.users.id\n  http_method   = \"GET\"\n  authorization_type = \"COGNITO_USER_POOLS\"\n  authorizer_id = aws_api_gateway_authorizer.cognito.id\n}\n\nresource \"aws_api_gateway_integration\" \"users_lambda\" {\n  rest_api_id = aws_api_gateway_rest_api.main.id\n  resource_id = aws_api_gateway_resource.users.id\n  http_method = aws_api_gateway_method.users_get.http_method\n  \n  integration_http_method = \"POST\"\n  type                    = \"AWS_PROXY\"\n  uri                     = aws_lambda_function.users_service.invoke_arn\n}\n\n# Servicio de usuarios como función Lambda\nresource \"aws_lambda_function\" \"users_service\" {\n  function_name = \"${var.app_name}-users-service\"\n  handler       = \"index.handler\"\n  runtime       = \"nodejs16.x\"\n  role          = aws_iam_role.lambda_exec.arn\n  \n  filename      = \"../services/users/dist/users.zip\"\n  source_code_hash = filebase64sha256(\"../services/users/dist/users.zip\")\n  \n  environment {\n    variables = {\n      DYNAMODB_TABLE = aws_dynamodb_table.users.name\n      USER_EVENTS_TOPIC = aws_sns_topic.user_events.arn\n    }\n  }\n  \n  tags = merge(\n    local.common_tags,\n    {\n      Service = \"users\"\n    }\n  )\n}\n\n# Base de datos de usuarios (DynamoDB)\nresource \"aws_dynamodb_table\" \"users\" {\n  name           = \"${var.app_name}-users\"\n  billing_mode   = \"PAY_PER_REQUEST\"\n  hash_key       = \"userId\"\n  \n  attribute {\n    name = \"userId\"\n    type = \"S\"\n  }\n  \n  attribute {\n    name = \"email\"\n    type = \"S\"\n  }\n  \n  global_secondary_index {\n    name               = \"EmailIndex\"\n    hash_key           = \"email\"\n    projection_type    = \"ALL\"\n  }\n  \n  tags = merge(\n    local.common_tags,\n    {\n      Service = \"users\"\n    }\n  )\n}\n\n# Mensajería asíncrona (SNS Topic y SQS Queue)\nresource \"aws_sns_topic\" \"user_events\" {\n  name = \"${var.app_name}-user-events\"\n  \n  tags = local.common_tags\n}\n\nresource \"aws_sqs_queue\" \"order_events\" {\n  name                      = \"${var.app_name}-order-events\"\n  delay_seconds             = 0\n  max_message_size          = 262144\n  message_retention_seconds = 86400\n  receive_wait_time_seconds = 10\n  \n  tags = local.common_tags\n}"
        }
      ],
      "relatedInstructions": ["devops007", "devops009"]
    },
    {
      "id": "devops009",
      "title": {
        "es": "Implementar alta disponibilidad y recuperación ante desastres",
        "en": "Implement high availability and disaster recovery"
      },
      "description": {
        "es": "Diseñar infraestructura resistente a fallos con capacidad de recuperación",
        "en": "Design fault-resilient infrastructure with recovery capabilities"
      },
      "text": {
        "es": "Implementa estrategias de alta disponibilidad (HA) y recuperación ante desastres (DR) para garantizar la continuidad del servicio incluso durante eventos disruptivos. Despliega recursos en múltiples zonas de disponibilidad, implementa replicación de datos entre regiones, configura balanceadores de carga para distribuir tráfico, utiliza grupos de auto-escalado para mantener capacidad, y establece políticas de copia de seguridad y retención. Define objetivos claros de punto de recuperación (RPO) y tiempo de recuperación (RTO), documenta procedimientos de failover, y prueba regularmente los planes de recuperación para validar su efectividad. Considera enfoques activo-activo para cargas de trabajo críticas y monitorea constantemente la salud del sistema.",
        "en": "Implement high availability (HA) and disaster recovery (DR) strategies to ensure service continuity even during disruptive events. Deploy resources across multiple availability zones, implement data replication between regions, configure load balancers to distribute traffic, use auto-scaling groups to maintain capacity, and establish backup and retention policies. Define clear recovery point objectives (RPO) and recovery time objectives (RTO), document failover procedures, and regularly test recovery plans to validate their effectiveness. Consider active-active approaches for critical workloads and constantly monitor system health."
      },
      "importance": "high",
      "category": "infrastructure",
      "subcategory": "reliability",
      "tags": ["devops", "reliability", "cloud"],
      "source": {
        "agentType": "devin",
        "repository": "Devin AI/devin.txt",
        "context": "System Reliability section"
      },
      "compatibility": {
        "frameworks": ["all"],
        "languages": ["all"],
        "environments": ["aws", "azure", "gcp", "on-premises"]
      },
      "examples": [
        {
          "context": {
            "es": "Ejemplo de configuración de alta disponibilidad en AWS",
            "en": "Example of high availability configuration in AWS"
          },
          "code": "# Configuración HA y DR en AWS con Terraform\n\n# Definir múltiples regiones para DR\nprovider \"aws\" {\n  alias  = \"primary\"\n  region = var.primary_region\n}\n\nprovider \"aws\" {\n  alias  = \"secondary\"\n  region = var.secondary_region\n}\n\n# VPC en región primaria\nmodule \"vpc_primary\" {\n  source  = \"terraform-aws-modules/vpc/aws\"\n  version = \"~> 3.0\"\n  providers = {\n    aws = aws.primary\n  }\n  \n  name = \"${var.app_name}-vpc-primary\"\n  cidr = \"10.0.0.0/16\"\n  \n  azs             = [\"${var.primary_region}a\", \"${var.primary_region}b\", \"${var.primary_region}c\"]\n  private_subnets = [\"10.0.1.0/24\", \"10.0.2.0/24\", \"10.0.3.0/24\"]\n  public_subnets  = [\"10.0.101.0/24\", \"10.0.102.0/24\", \"10.0.103.0/24\"]\n  \n  enable_nat_gateway = true\n  enable_vpn_gateway = false\n  \n  tags = merge(\n    local.common_tags,\n    {\n      Region = var.primary_region\n    }\n  )\n}\n\n# VPC en región secundaria para DR\nmodule \"vpc_secondary\" {\n  source  = \"terraform-aws-modules/vpc/aws\"\n  version = \"~> 3.0\"\n  providers = {\n    aws = aws.secondary\n  }\n  \n  name = \"${var.app_name}-vpc-secondary\"\n  cidr = \"10.1.0.0/16\"\n  \n  azs             = [\"${var.secondary_region}a\", \"${var.secondary_region}b\"]\n  private_subnets = [\"10.1.1.0/24\", \"10.1.2.0/24\"]\n  public_subnets  = [\"10.1.101.0/24\", \"10.1.102.0/24\"]\n  \n  enable_nat_gateway = true\n  enable_vpn_gateway = false\n  \n  tags = merge(\n    local.common_tags,\n    {\n      Region = var.secondary_region\n    }\n  )\n}\n\n# RDS con replicación multi-AZ y entre regiones\nresource \"aws_db_instance\" \"primary\" {\n  provider               = aws.primary\n  identifier             = \"${var.app_name}-db-primary\"\n  engine                 = \"mysql\"\n  engine_version         = \"8.0\"\n  instance_class         = \"db.t3.medium\"\n  allocated_storage      = 50\n  max_allocated_storage  = 100\n  name                   = var.db_name\n  username               = var.db_username\n  password               = var.db_password\n  multi_az               = true  # Alta disponibilidad multi-AZ\n  db_subnet_group_name   = aws_db_subnet_group.primary.name\n  vpc_security_group_ids = [aws_security_group.db_primary.id]\n  backup_retention_period = 7  # Retención de backups por 7 días\n  backup_window           = \"03:00-04:00\"  # Ventana de backup\n  maintenance_window      = \"sun:04:30-sun:05:30\"  # Ventana de mantenimiento\n  deletion_protection     = true  # Protección contra eliminación accidental\n  storage_encrypted       = true  # Encriptación en reposo\n  copy_tags_to_snapshot   = true\n  tags = local.common_tags\n}\n\n# Réplica de lectura en región secundaria para DR\nresource \"aws_db_instance\" \"replica\" {\n  provider             = aws.secondary\n  identifier           = \"${var.app_name}-db-replica\"\n  replicate_source_db  = aws_db_instance.primary.arn\n  instance_class       = \"db.t3.medium\"\n  availability_zone    = \"${var.secondary_region}a\"\n  publicly_accessible  = false\n  skip_final_snapshot  = false\n  vpc_security_group_ids = [aws_security_group.db_secondary.id]\n  db_subnet_group_name = aws_db_subnet_group.secondary.name\n  tags = merge(\n    local.common_tags,\n    {\n      Type  = \"read-replica\"\n      Region = var.secondary_region\n    }\n  )\n}\n\n# S3 para backups con replicación entre regiones\nresource \"aws_s3_bucket\" \"backup_primary\" {\n  provider = aws.primary\n  bucket   = \"${var.app_name}-backups-${var.primary_region}\"\n  \n  versioning {\n    enabled = true\n  }\n  \n  lifecycle_rule {\n    id      = \"backup-lifecycle\"\n    enabled = true\n    \n    transition {\n      days          = 30\n      storage_class = \"STANDARD_IA\"\n    }\n    \n    transition {\n      days          = 90\n      storage_class = \"GLACIER\"\n    }\n    \n    expiration {\n      days = 365\n    }\n  }\n  \n  server_side_encryption_configuration {\n    rule {\n      apply_server_side_encryption_by_default {\n        sse_algorithm = \"AES256\"\n      }\n    }\n  }\n  \n  tags = local.common_tags\n}\n\n# Configuración de replicación entre regiones para S3\nresource \"aws_s3_bucket\" \"backup_secondary\" {\n  provider = aws.secondary\n  bucket   = \"${var.app_name}-backups-${var.secondary_region}\"\n  \n  versioning {\n    enabled = true\n  }\n  \n  tags = local.common_tags\n}\n\nresource \"aws_s3_bucket_replication_configuration\" \"backup_replication\" {\n  provider   = aws.primary\n  role       = aws_iam_role.replication.arn\n  bucket     = aws_s3_bucket.backup_primary.id\n  \n  rule {\n    id       = \"backup-replication\"\n    status   = \"Enabled\"\n    priority = 1\n    \n    destination {\n      bucket        = aws_s3_bucket.backup_secondary.arn\n      storage_class = \"STANDARD\"\n    }\n    \n    filter {\n      prefix = \"\"\n    }\n    \n    delete_marker_replication {\n      status = \"Enabled\"\n    }\n  }\n}\n\n# Route 53 para DNS failover\nresource \"aws_route53_health_check\" \"primary\" {\n  fqdn              = aws_lb.primary.dns_name\n  port              = 443\n  type              = \"HTTPS\"\n  resource_path     = \"/health\"\n  failure_threshold = 3\n  request_interval  = 30\n  \n  tags = merge(\n    local.common_tags,\n    {\n      Name = \"${var.app_name}-primary-health-check\"\n    }\n  )\n}\n\nresource \"aws_route53_record\" \"primary\" {\n  zone_id = aws_route53_zone.main.zone_id\n  name    = var.app_domain\n  type    = \"A\"\n  \n  failover_routing_policy {\n    type = \"PRIMARY\"\n  }\n  \n  set_identifier  = \"primary\"\n  health_check_id = aws_route53_health_check.primary.id\n  \n  alias {\n    name                   = aws_lb.primary.dns_name\n    zone_id                = aws_lb.primary.zone_id\n    evaluate_target_health = true\n  }\n}\n\nresource \"aws_route53_record\" \"secondary\" {\n  zone_id = aws_route53_zone.main.zone_id\n  name    = var.app_domain\n  type    = \"A\"\n  \n  failover_routing_policy {\n    type = \"SECONDARY\"\n  }\n  \n  set_identifier = \"secondary\"\n  \n  alias {\n    name                   = aws_lb.secondary.dns_name\n    zone_id                = aws_lb.secondary.zone_id\n    evaluate_target_health = true\n  }\n}"
        }
      ],
      "relatedInstructions": ["devops007", "devops008"]
    }
  ]
}
