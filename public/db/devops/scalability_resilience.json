{
  "instructions": [
    {
      "id": "scal010",
      "title": {
        "es": "Implementar circuit breakers",
        "en": "Implement circuit breakers"
      },
      "description": {
        "es": "Usar circuit breakers para prevenir cascadas de fallos",
        "en": "Use circuit breakers to prevent cascading failures"
      },
      "text": {
        "es": "Implementa el patrón de circuit breaker para prevenir que fallos en servicios dependientes causen fallos en cascada a través del sistema. Este patrón detecta fallos y rechaza peticiones durante un período específico, permitiendo que los servicios dependientes se recuperen y evitando sobrecarga en sistemas ya comprometidos.",
        "en": "Implement the circuit breaker pattern to prevent failures in dependent services from causing cascading failures throughout the system. This pattern detects failures and rejects requests for a specific period, allowing dependent services to recover and preventing overload on already compromised systems."
      },
      "importance": "medium",
      "category": "scalability",
      "subcategory": "resilience",
      "tags": ["microservices", "resilience", "architecture"],
      "source": {
        "agentType": "general",
        "repository": "system-prompts/devops",
        "context": "Resilience Patterns"
      },
      "compatibility": {
        "frameworks": ["resilience4j", "hystrix", "polly", "sentinel"],
        "languages": ["java", "dotnet", "nodejs", "go"],
        "environments": ["all"]
      },
      "examples": [
        {
          "context": {
            "es": "Circuit breaker en Java con Resilience4j",
            "en": "Circuit breaker in Java with Resilience4j"
          },
          "code": "import io.github.resilience4j.circuitbreaker.CircuitBreaker;\nimport io.github.resilience4j.circuitbreaker.CircuitBreakerConfig;\nimport io.github.resilience4j.circuitbreaker.CircuitBreakerRegistry;\n\npublic class PaymentService {\n    private final CircuitBreaker circuitBreaker;\n\n    public PaymentService() {\n        CircuitBreakerConfig config = CircuitBreakerConfig.custom()\n            .failureRateThreshold(50)  // 50% failure rate to open circuit\n            .waitDurationInOpenState(Duration.ofSeconds(30))\n            .build();\n            \n        CircuitBreakerRegistry registry = CircuitBreakerRegistry.of(config);\n        this.circuitBreaker = registry.circuitBreaker(\"paymentService\");\n    }\n}"
        }
      ],
      "relatedInstructions": ["scal011", "ms004", "api005"]
    },
    {
      "id": "scal011",
      "title": {
        "es": "Implementar retry con backoff exponencial",
        "en": "Implement retry with exponential backoff"
      },
      "description": {
        "es": "Utilizar reintentos inteligentes para mejorar resiliencia sin sobrecargar",
        "en": "Use smart retries to improve resilience without overloading"
      },
      "text": {
        "es": "Implementa un patrón de reintento con backoff exponencial para operaciones que pueden fallar transitoriamente. Aumenta progresivamente el tiempo entre reintentos para reducir la carga en sistemas estresados y mejorar las posibilidades de éxito eventual sin contribuir a problemas de sobrecarga.",
        "en": "Implement a retry pattern with exponential backoff for operations that may fail transiently. Progressively increase the time between retries to reduce load on stressed systems and improve chances of eventual success without contributing to overload problems."
      },
      "importance": "medium",
      "category": "scalability",
      "subcategory": "resilience",
      "tags": ["microservices", "resilience", "best_practices"],
      "source": {
        "agentType": "general",
        "repository": "system-prompts/devops",
        "context": "Resilience Patterns"
      },
      "compatibility": {
        "frameworks": ["resilience4j", "retry", "polly", "spring-retry"],
        "languages": ["all"],
        "environments": ["all"]
      },
      "examples": [
        {
          "context": {
            "es": "Implementación de retry con backoff exponencial en Node.js",
            "en": "Implementing retry with exponential backoff in Node.js"
          },
          "code": "// Retry function with exponential backoff\nasync function retryWithExponentialBackoff(operation, maxRetries = 5, baseDelay = 300) {\n  let retries = 0;\n  \n  while (true) {\n    try {\n      return await operation();\n    } catch (error) {\n      if (retries >= maxRetries) throw error;\n      const delay = baseDelay * Math.pow(2, retries) + Math.random() * 100;\n      await new Promise(resolve => setTimeout(resolve, delay));\n      retries++;\n    }\n  }\n}"
        }
      ],
      "relatedInstructions": ["scal010", "ms004", "api005"]
    },
    {
      "id": "scal012",
      "title": {
        "es": "Implementar bulkheads",
        "en": "Implement bulkheads"
      },
      "description": {
        "es": "Aislar componentes críticos para evitar que fallos se propaguen",
        "en": "Isolate critical components to prevent failure propagation"
      },
      "text": {
        "es": "Implementa el patrón de bulkhead para aislar partes de la aplicación, previniendo que los fallos en un componente afecten a otros. Asigna pools de recursos separados (como hilos, conexiones o memoria) a diferentes componentes para que la saturación de uno no impacte en la disponibilidad de los demás.",
        "en": "Implement the bulkhead pattern to isolate parts of your application, preventing failures in one component from affecting others. Allocate separate resource pools (such as threads, connections, or memory) to different components so that saturation of one doesn't impact the availability of others."
      },
      "importance": "medium",
      "category": "scalability",
      "subcategory": "resilience",
      "tags": ["microservices", "resilience", "architecture"],
      "source": {
        "agentType": "general",
        "repository": "system-prompts/devops",
        "context": "Resilience Patterns"
      },
      "compatibility": {
        "frameworks": ["resilience4j", "hystrix", "istio", "envoy"],
        "languages": ["all"],
        "environments": ["all"]
      },
      "examples": [
        {
          "context": {
            "es": "Implementación de bulkheads en Java",
            "en": "Implementing bulkheads in Java"
          },
          "code": "// Separate thread pools for different service categories\nprivate final ThreadPoolExecutor criticalServicePool = new ThreadPoolExecutor(\n    10, 20, 60, TimeUnit.SECONDS, new ArrayBlockingQueue<>(50));\n    \nprivate final ThreadPoolExecutor nonCriticalServicePool = new ThreadPoolExecutor(\n    5, 10, 60, TimeUnit.SECONDS, new ArrayBlockingQueue<>(100));"
        }
      ],
      "relatedInstructions": ["scal010", "ms004", "api003"]
    },
    {
      "id": "scal013",
      "title": {
        "es": "Implementar timeout adecuado",
        "en": "Implement proper timeouts"
      },
      "description": {
        "es": "Establecer límites de tiempo para todas las operaciones externas",
        "en": "Set time limits for all external operations"
      },
      "text": {
        "es": "Implementa timeouts explícitos y adecuados para todas las llamadas a servicios externos o recursos remotos. Nunca permitas llamadas sin timeout, ya que podrían bloquear indefinidamente hilos o conexiones valiosas. Ajusta los valores de timeout basándote en datos reales de latencia y contempla diferentes valores según la importancia de cada operación.",
        "en": "Implement explicit and appropriate timeouts for all calls to external services or remote resources. Never allow calls without timeouts, as they could indefinitely block valuable threads or connections. Tune timeout values based on real latency data, and consider different values based on the importance of each operation."
      },
      "importance": "high",
      "category": "scalability",
      "subcategory": "resilience",
      "tags": ["microservices", "resilience", "best_practices"],
      "source": {
        "agentType": "general",
        "repository": "system-prompts/devops",
        "context": "Resilience Patterns"
      },
      "compatibility": {
        "frameworks": ["all"],
        "languages": ["all"],
        "environments": ["all"]
      },
      "examples": [
        {
          "context": {
            "es": "Implementación de timeouts en diferentes lenguajes",
            "en": "Implementing timeouts in different languages"
          },
          "code": "// Java example with HttpClient\nHttpClient client = HttpClient.newBuilder()\n    .connectTimeout(Duration.ofSeconds(5))\n    .build();\n\n// Python example with requests\nimport requests\ntry:\n    response = requests.get('https://api.example.com/data', \n                         timeout=(3.05, 10))\nexcept requests.exceptions.Timeout:\n    # Handle timeout error\n    print(\"The request timed out\")"
        }
      ],
      "relatedInstructions": ["scal010", "scal011", "perf004"]
    },
    {
      "id": "scal014",
      "title": {
        "es": "Implementar degradación elegante",
        "en": "Implement graceful degradation"
      },
      "description": {
        "es": "Mantener funcionalidad esencial cuando los recursos son limitados",
        "en": "Maintain essential functionality when resources are constrained"
      },
      "text": {
        "es": "Implementa estrategias de degradación elegante que permitan a tu sistema seguir funcionando con capacidad reducida durante períodos de alta carga o cuando ciertos componentes fallen. Identifica las funcionalidades esenciales que deben mantenerse y aquellas secundarias que pueden desactivarse temporalmente para preservar la experiencia principal.",
        "en": "Implement graceful degradation strategies that allow your system to continue operating with reduced capacity during periods of high load or when certain components fail. Identify essential functionalities that must be maintained and secondary ones that can be temporarily disabled to preserve the core experience."
      },
      "importance": "medium",
      "category": "scalability",
      "subcategory": "resilience",
      "tags": ["architecture", "user_experience", "reliability"],
      "source": {
        "agentType": "general",
        "repository": "system-prompts/devops",
        "context": "Resilience Patterns"
      },
      "compatibility": {
        "frameworks": ["all"],
        "languages": ["all"],
        "environments": ["all"]
      },
      "examples": [
        {
          "context": {
            "es": "Degradación elegante en servicio web",
            "en": "Graceful degradation in web service"
          },
          "code": "// Check if we're in high load mode\nif (isHighLoadMode.get()) {\n    // Skip all non-essential enrichments under high load\n    response.setMessage(\"Some features are temporarily unavailable\");\n    return response;\n}\n\n// Try to get recommendations - non-essential, can be skipped\ntry {\n    List<Product> recommendations = recommendationService.getRecommendations(productId);\n    response.setRecommendations(recommendations);\n} catch (Exception e) {\n    // Just log and continue without recommendations\n    log.info(\"Skipping recommendations due to service issues\");\n}"
        }
      ],
      "relatedInstructions": ["scal010", "scal013", "perf006"]
    },
    {
      "id": "scal015",
      "title": {
        "es": "Diseñar para fallos",
        "en": "Design for failure"
      },
      "description": {
        "es": "Construir sistemas asumiendo que los fallos ocurrirán",
        "en": "Build systems assuming that failures will occur"
      },
      "text": {
        "es": "Diseña todos los componentes del sistema asumiendo que ocurrirán fallos. Anticipa escenarios de fallo específicos para cada componente y desarrolla estrategias para detectar, mitigar y recuperarse de estos fallos. Esto implica implementar sistemas de monitorización efectivos, redundancia apropiada, y mecanismos de recuperación automática desde distintos tipos de fallos.",
        "en": "Design all system components assuming that failures will occur. Anticipate specific failure scenarios for each component and develop strategies to detect, mitigate, and recover from these failures. This involves implementing effective monitoring systems, appropriate redundancy, and mechanisms for automatically recovering from different types of failures."
      },
      "importance": "high",
      "category": "scalability",
      "subcategory": "resilience",
      "tags": ["architecture", "reliability", "best_practices"],
      "source": {
        "agentType": "general",
        "repository": "system-prompts/devops",
        "context": "Cloud Architecture Best Practices"
      },
      "compatibility": {
        "frameworks": ["all"],
        "languages": ["all"],
        "environments": ["all"]
      },
      "examples": [
        {
          "context": {
            "es": "Diseño para fallos en microservicios",
            "en": "Design for failure in microservices"
          },
          "code": "// Health Check API\n@RestController\npublic class HealthController {\n    @GetMapping(\"/health\")\n    public HealthStatus checkHealth() {\n        return new HealthStatus(\"UP\", System.currentTimeMillis());\n    }\n}\n\n// Graceful shutdown\n@PreDestroy\npublic void shutdown() {\n    // Allow in-flight requests to complete (30 seconds max)\n    server.shutdown(30, TimeUnit.SECONDS);\n    // Close resources gracefully\n    databaseConnection.close();\n}"
        }
      ],
      "relatedInstructions": ["mon001", "infra003", "ms001"]
    }
  ]
}